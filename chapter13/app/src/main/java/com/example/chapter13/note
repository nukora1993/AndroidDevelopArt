#crashhandler：用于在程序异常时捕获异常
#multidex：由于app中的方法数量不能超过65535，所以multidex用于将一个app拆分为多个dex
#也可以动态加载dex解决方法数量限制
#反编译:dex2jar和apktool，dex2jar将dex转换为jar，再通过jd-gui就可以获得反编译后的java代码，apktool用于解包和二次打包

#在低版本系统中，有时方法数量没有达到65535也会报错。这是因为采用dexopt进行了dex优化。
#dexopt采用固定大小的缓冲区存储app中搜友方法的信息，这个缓冲区叫做LinearAlloc
#LinearAlloc在旧版本比较小，新版本比较大，所以会导致报错

#解决方法：拆分dex，插件化，但是比较重量级和存在兼容性问题，google提出multidex解决

#multidex的使用：5.0之前需要引入jar包，5.0之后默认支持，multidex主要针对Android Studio
#使用multidex:
#在build.gradle的defalutConfig中加入multiDexEnable true,并且引入以来implementation 'com.android.support:multidex:1.0.0'
#方法1：在manifest中配置name为android.support.multidex.MultiDexApplication(不过好像不管用变成了androidx的包了)
#方法2：继承一个MultiDexApplication并配置在manifest(原理和1一样）
#方法3：重写Application的attachBaseContext，调用MutliDex.install(this)
#采用multidex之后，如果app的方法数量超限，会在apk中自动打包为多个dex文件

#MultiDex相关的类必须被打包在主Dex（通过gradle配置）
#因为Application中的成员会先于attachBase初始化，如果成员使用了非主Dex的类，那么此时他们还未被加载，就会报错
#Multidex缺点：app启动速度降低，尤其是要加载大的dex，可能导致虚拟机bug

#动态加载：插件化，在不更新应用版本的情况下更新某些模块
#插件化并没有统一的方案，但是有共同的问题：资源访问、Activity生命周期管理、ClassLoader管理
#宿主：指的是普通apk，插件一般是dex或者apk，主流插件访问主要采用经过特殊处理的apk，很多插件化框架需要用到代理Activity实现，插件的启动由代理Activity实现

#资源访问：宿主如何访问插件资源，比较好的方案是自己实现ContexImpl的getAssets和getResource
#比如：通过反射调用assetManager的addAssetPath方法和获取一个Resources对象
#通过反射调用时因为addAssetPath方法时隐藏的API
#然后通过代理Activity获取资源

#Activity生命周期管理：需要用到代理Activity，在代理Activity中通过反射调用Activity的生命周期（疑问？为什么要自己管理而不是AMS管理？）
#也可用接口方式，将Activity的生命周期提取为接口，由于没有采用反射所以性能较好

#ClassLoader管理：主要时为了一个插件用一个ClassLoader，保证不同插件互不干扰，可以采用HashMap

#dex2jar：将dex转换为jar包，用jd-gui加载jar包中的class(实际测试发现有的apk并不包含Activity这些组件）
#apktool:可以解包apk，得到smail文件，smail文件时dex文件的反编译结果，但不同于dex2jar的过程
#smail有自己的语法并且apktool可以重新打包签名并安装



