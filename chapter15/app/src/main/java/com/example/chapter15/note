#性能优化
#布局优化：尽量减少布局文件的层级，尽量选择性能较高的layout
#比如linearlayout效率高于relativelayout
#<include>标签：可以加载指定布局文件到当前布局文件
#<include>标签只支持以android:layout开头的属性，比如不支持android:background
#include指定的id属性会覆盖被include的id属性，如果include标签指定layout*s户型，则要求同时指定layout_width和layout_height

#<merge>标签：通常和include标签一起使用，如果include一个merge的layout，那么会融合而非潜逃，用于减少层级

#ViewStub:是一个特殊的view，宽高都是0，用于延迟加载某些布局

#不要再onDraw方法中创建大量局部对象，因为onDraw调用频繁，会导致频繁gc

#常见内存泄漏场景：
#1.类静态变量引用实例：静态变量的生命周期是整个app，所以会导致泄露
#2.单例模式导致：比如单例提供了注册listener但是没有提供解除注册listener，所以listener会泄露
#3.属性动画：如果无限循环的动画没有主动停止，那么会导致动画持有的view和Activity无法被回收

#ANR分析：当出现anr时，系统会在/data/anr下创建traces.txt(但是貌似有的手机没有,或者是权限问题？）

#ListView优化：采用ViewHolder并且避免getView执行耗时操作（或者采用RecyclerView),开启硬件加速，GridView同理
#Bitmap优化：降低采样率，采用cache

#线程优化：线程池

#其他：不要过多使用枚举，尽量使用static final修饰常量，使用Android特有的数据结构，使用缓存，尽量采用静态内部类

#提供程序可维护性：代码风格、代码层次性和单一指责、面向扩展和设计模式、仅对关键代码写注释